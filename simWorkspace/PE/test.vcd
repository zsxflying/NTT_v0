$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 9 clk $end
  $var wire  1 2 io_din_ctrl_lastOrFlush $end
  $var wire  1 1 io_din_ctrl_valid $end
  $var wire  8 / io_din_payload_data [7:0] $end
  $var wire  8 0 io_din_payload_weight [7:0] $end
  $var wire  1 6 io_dout_ctrl_lastOrFlush $end
  $var wire  1 5 io_dout_ctrl_valid $end
  $var wire  8 3 io_dout_payload_data [7:0] $end
  $var wire  8 4 io_dout_payload_weight [7:0] $end
  $var wire 16 8 io_mulres_payload [15:0] $end
  $var wire  1 7 io_mulres_valid $end
  $var wire  1 : resetn $end
  $scope module PE $end
   $var wire 16 ; MAX_VALUE [15:0] $end
   $var wire 16 < MIN_VALUE [15:0] $end
   $var wire  1 9 clk $end
   $var wire  1 - cond0 $end
   $var wire  1 . cond1 $end
   $var wire  1 & dinCtrlReg_lastOrFlush $end
   $var wire  1 % dinCtrlReg_valid $end
   $var wire  8 # dinPayloadReg_data [7:0] $end
   $var wire  8 $ dinPayloadReg_weight [7:0] $end
   $var wire  1 2 io_din_ctrl_lastOrFlush $end
   $var wire  1 1 io_din_ctrl_valid $end
   $var wire  8 / io_din_payload_data [7:0] $end
   $var wire  8 0 io_din_payload_weight [7:0] $end
   $var wire  1 6 io_dout_ctrl_lastOrFlush $end
   $var wire  1 5 io_dout_ctrl_valid $end
   $var wire  8 3 io_dout_payload_data [7:0] $end
   $var wire  8 4 io_dout_payload_weight [7:0] $end
   $var wire 16 8 io_mulres_payload [15:0] $end
   $var wire  1 7 io_mulres_valid $end
   $var wire 16 ' multiplyRes [15:0] $end
   $var wire  1 + resAccRegValue0 $end
   $var wire  3 , resAccRegValue1 [2:0] $end
   $var wire  1 ( resAccReg_lastOrFlushReg $end
   $var wire  1 7 resAccReg_validOut $end
   $var wire  1 ) resAccReg_validReg $end
   $var wire 18 * resAccReg_value [17:0] $end
   $var wire  1 : resetn $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b11101100 #
b00011100 $
0%
0&
b1111110111010000 '
0(
0)
b111111110111010000 *
1+
b111 ,
0-
0.
b11101100 /
b00011100 0
01
12
b11101100 3
b00011100 4
05
06
07
b1111110111010000 8
19
0:
b0111111111111111 ;
b1000000000000000 <
#5
09
#10
19
#15
09
#20
19
#25
09
#30
19
#35
09
#40
19
#45
09
#50
19
#55
09
#60
19
#65
09
#70
19
#75
09
#80
19
#85
09
#90
19
#95
09
#100
19
#105
09
#110
19
#115
09
#120
19
#125
09
#130
19
#135
09
#140
19
#145
09
#150
19
#155
09
#160
1&
16
19
1:
#165
09
#170
1(
b01111111 /
b01111111 0
11
02
19
#175
09
#180
b01111111 #
b01111111 $
1%
0&
b0011111100000001 '
b01111111 3
b01111111 4
15
06
19
#185
09
#190
0(
1)
b000011111100000001 *
0+
b000 ,
b0011111100000001 8
19
#195
09
#200
b000111111000000010 *
b10000000 /
12
b0111111000000010 8
19
#205
09
#210
b10000000 #
1&
b1100000010000000 '
b001011110100000011 *
b001 ,
1-
02
b10000000 3
16
b0111111111111111 8
19
#215
09
#220
0&
1(
b000111110110000011 *
b000 ,
0-
06
17
b0111110110000011 8
19
#225
09
#230
0(
b111100000010000000 *
1+
b111 ,
07
b1100000010000000 8
19
#235
09
#240
b111000000100000000 *
b01111111 /
12
b1000000100000000 8
19
#245
09
#250
b01111111 #
1&
b0011111100000001 '
b110100000110000000 *
b110 ,
1.
02
b01111111 3
16
b1000000000000000 8
19
#255
09
#260
0&
1(
b111000000010000001 *
b111 ,
0.
06
17
b1000000010000001 8
19
#265
09
#270
0(
b000011111100000001 *
0+
b000 ,
07
b0011111100000001 8
19
#275
09
#280
b000111111000000010 *
b0111111000000010 8
19
#285
09
#290
b001011110100000011 *
b001 ,
1-
b0111111111111111 8
19
#295
09
#300
b001111110000000100 *
19
#305
09
#310
b010011101100000101 *
b010 ,
19
#315
09
#320
b010111101000000110 *
19
#325
09
#330
b011011100100000111 *
b011 ,
19
#335
09
#340
b011111100000001000 *
19
#345
09
#350
b100011011100001001 *
1+
b100 ,
0-
1.
b1000000000000000 8
19
#355
09
#360
